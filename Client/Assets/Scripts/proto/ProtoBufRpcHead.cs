/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class ProtoBufRpcHead : TBase
{
  private int _version;
  private int _msg_type;
  private long _session_id;
  private string _function_name;
  private int _timeout_ms;
  private long _timestamp;

  public int Version
  {
    get
    {
      return _version;
    }
    set
    {
      __isset.version = true;
      this._version = value;
    }
  }

  public int Msg_type
  {
    get
    {
      return _msg_type;
    }
    set
    {
      __isset.msg_type = true;
      this._msg_type = value;
    }
  }

  public long Session_id
  {
    get
    {
      return _session_id;
    }
    set
    {
      __isset.session_id = true;
      this._session_id = value;
    }
  }

  public string Function_name
  {
    get
    {
      return _function_name;
    }
    set
    {
      __isset.function_name = true;
      this._function_name = value;
    }
  }

  public int Timeout_ms
  {
    get
    {
      return _timeout_ms;
    }
    set
    {
      __isset.timeout_ms = true;
      this._timeout_ms = value;
    }
  }

  public long Timestamp
  {
    get
    {
      return _timestamp;
    }
    set
    {
      __isset.timestamp = true;
      this._timestamp = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool version;
    public bool msg_type;
    public bool session_id;
    public bool function_name;
    public bool timeout_ms;
    public bool timestamp;
  }

  public ProtoBufRpcHead() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Version = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Msg_type = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              Session_id = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Function_name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              Timeout_ms = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I64) {
              Timestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("ProtoBufRpcHead");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.version) {
        field.Name = "version";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Version);
        oprot.WriteFieldEnd();
      }
      if (__isset.msg_type) {
        field.Name = "msg_type";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Msg_type);
        oprot.WriteFieldEnd();
      }
      if (__isset.session_id) {
        field.Name = "session_id";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Session_id);
        oprot.WriteFieldEnd();
      }
      if (Function_name != null && __isset.function_name) {
        field.Name = "function_name";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Function_name);
        oprot.WriteFieldEnd();
      }
      if (__isset.timeout_ms) {
        field.Name = "timeout_ms";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Timeout_ms);
        oprot.WriteFieldEnd();
      }
      if (__isset.timestamp) {
        field.Name = "timestamp";
        field.Type = TType.I64;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Timestamp);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("ProtoBufRpcHead(");
    bool __first = true;
    if (__isset.version) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Version: ");
      __sb.Append(Version);
    }
    if (__isset.msg_type) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Msg_type: ");
      __sb.Append(Msg_type);
    }
    if (__isset.session_id) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Session_id: ");
      __sb.Append(Session_id);
    }
    if (Function_name != null && __isset.function_name) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Function_name: ");
      __sb.Append(Function_name);
    }
    if (__isset.timeout_ms) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Timeout_ms: ");
      __sb.Append(Timeout_ms);
    }
    if (__isset.timestamp) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Timestamp: ");
      __sb.Append(Timestamp);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

